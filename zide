#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Copyright (c) 2019 Sebastian Gniazdowski

# Type-agnostic script/function, i.e.: the file can be ran as a +x
# script or as an autoload function

# Run as script? ZSH_SCRIPT is a Zsh 5.3 addition
if [[ $0 != zide || -n $ZSH_SCRIPT ]]; then
    # Handle $0 according to the Zsh Plugin Standard:
    # http://zdharma.org/Zsh-100-Commits-Club/Zsh-Plugin-Standard.html
    0=${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}
    0=${${(M)0##/*}:-$PWD/$0}

    local ZIDE_DIR=${0:h}
    fpath+=( "$ZIDE_DIR" )

    autoload -Uz \
        .zide-any-to-user-module \
        .zide-colorify-module-name \
        .zide-countdown \
        .zide-compute-ice \
        .zide-store-ices \
        .zide-compile-module \
        .zide-ice \
        .zide-addfile \
        .zide-setup-module
fi

# Set the base and typically useful options
emulate -LR zsh
setopt extended_glob warn_create_global typeset_silent \
        no_short_loops rc_quotes no_auto_pushd

local MATCH REPLY; integer MBEGIN MEND
local -a match mbegin mend reply

local action=$1 name
local -a ide_mods shift noet license
local -A Mods Mods_Ices ZIDE ZIDE_ICE ZIDE_EXTS

ZIDE=(
    c-uname $'\e[35m'
    c-mname `print -P %F{33}`
    c-bold  $'\e[1m'
    c-uline $'\e[4m'
    c-rst   $'\e[0m'
)

Mods=(
    # Zdharma
    zshelldoc       "zdharma/zshelldoc"
    zflai           "zdharma/zflai"
    zui             "zdharma/zui"
    zsh-string-lib  "zdharma/zsh-string-lib"
    # Zsh-ide
    shu2            "zsh-ide/shu2"
    # Molovo
    zunit           "zunit-zsh/zunit"
    revolver        "molovo/revolver"
    # Jsks
    czhttpd         "jsks/czhttpd"
    # Mvdan
    shfmt           "mvdan/sh"
)

Mods_Ices=(
    # Zdharma
    zshelldoc       "make'install PREFIX=bin'"
    zflai           ""
    zui             ""
    zsh-string-lib  ""
    # Zsh-ide
    shu2            ""
    # Molovo
    zunit           "atclone'./build' atpull'%atclone'"
    revolver        "atclone'./build' atpull'%atclone'"
    # Jsks
    czhttpd         "jsks/czhttpd"
    # Mvdan
    shfmt           "from'gh-r'"
)


case $action in
    (create)
        # -D - clear out the recognized options
        # -E - allow mixing of options and non-options
        # -K - allow default values
        # -M - allow private arrays for the options
        #
        # The options are:
        # --with/--mod/-m/--use – to pass the desired module(s)
        zparseopts -D -E -K -M -mod+:=ide_mods m+:=ide_mods \
            -with+:=ide_mods -use+:=ide_mods
        name=$2
        ;;

    (addfile)
        # -D - clear out the recognized options
        # -E - allow mixing of options and non-options
        # -K - allow default values
        # -M - allow private arrays for the options
        #
        # The options are:
        # --with/--mod/-m/--use – to pass the desired module(s)
        shift=( -s 4 )
        license=( -l MIT )
        zparseopts -D -E -K -M s:=shift -shift:=shift \
            n=noet -noet=noet l:=license -license:=license

        name=$2
        ;;
esac

integer i l m

# Filter out option-strings
i=0; ide_mods=( ${ide_mods/(#m)*/${ide_mods[ ++i % 2 ? 0 : i ]}} )
i=0; shift=( ${shift/(#m)*/${shift[ ++i % 2 ? 0 : i ]}} )
i=0; noet=( ${noet/(#m)*/${noet[ ++i % 2 ? 0 : i ]}} )
i=0; license=( ${license/(#m)*/${license[ ++i % 2 ? 0 : i ]}} )

# Verify that the mods are correct
local mod
for mod ( $ide_mods ) {
    [[ -z ${Mods[(ie)$mod]} ]] && \
        { print -P "%F{160}Incorrect module given: " \
            "%F{141}\`%F{120}$mod%F{141}'%F{160}," \
            "aborting.%f"
            return 1
        }
}

if [[ $action = addfile ]] {
    .zide-addfile "$shift" "$noet" "$license" "$name"
    return $?
}

if [[ $action = create ]] {
    if [[ -n $name ]] {
        if [[ $PWD != */$name ]]; then
            command mkdir $name
            cd -q $name
        fi
    }

    if [[ ! -d .git ]]; then
        command git init
    fi

    for mod ( $ide_mods ) {
        local modv=${Mods[$mod]}
        ZIDE_ICE=()
        .zide-ice "${(@Q)${(@z)Mods_Ices[$mod]}}"
        .zide-any-to-user-module "$modv"
        .zide-setup-module "${reply[1]}" "${reply[2]}" "$mod" components/$mod
    }
}

# vim:ft=zsh:sw=4:sts=4:et
