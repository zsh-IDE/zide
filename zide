#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Type-agnostic script/function, i.e.: the file can be ran as a +x
# script or as an autoload function

# Run as script? ZSH_SCRIPT is a Zsh 5.3 addition
if [[ $0 != zide || -n $ZSH_SCRIPT ]]; then
    # Handle $0 according to the Zsh Plugin Standard:
    # http://zdharma.org/Zsh-100-Commits-Club/Zsh-Plugin-Standard.html
    0=${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}
    0=${${(M)0##/*}:-$PWD/$0}

    local ZIDE_DIR=${0:h}
fi

# Set the base and typically useful options
emulate -LR zsh
setopt extended_glob warn_create_global typeset_silent \
        no_short_loops rc_quotes no_auto_pushd

local action=$1 name
local -a ide_mods
local -A Mods

Mods=(
    # Zdharma
    zshelldoc       "zdharma/zshelldoc"
    zflai           "zdharma/zflai"
    zui             "zdharma/zui"
    zsh-string-lib  "zdharma/zsh-string-lib"
    # Zsh-ide
    shu2            "zsh-ide/shu2"
    # Molovo
    zunit           "zunit-zsh/zunit"
    revolver        "molovo/revolver"
    # Jsks
    czhttpd         "jsks/czhttpd"
    # Mvdan
    shfmt           "bin:mvdan/sh"
)

case $action in
    (create)
        # -D - clear out the recognized options
        # -E - allow mixing of options and non-options
        # -K - allow default values
        # -M - allow private arrays for the options
        #
        # The options are:
        # --with/--mod/-m/--use â€“ to pass the desired module(s)
        zparseopts -D -E -K -M -mod:=ide_mods m:=ide_mods \
            -with:=ide_mods -use:=ide_mods
        name=$2
        ;;
esac

integer i l m

# Filter out option-strings
ide_mods=( ${ide_mods/(#m)*/${ide_mods[ ++i % 2 ? 0 : i ]}} )

# Verify that the mods are correct
local mod
for mod ( $ide_mods ) {
    [[ -z ${Mods[(ie)$mod]} ]] && \
        { print -P "%F{160}Incorrect module given: " \
            "%F{141}\`%F{120}$mod%F{141}'%F{160}," \
            "aborting.%f"
            return 1
        }
}

# vim:ft=zsh:sw=4:sts=4:et
