# -*- mode: sh; sh-indentation: 4; sh-basic-offset: 4; indent-tabs-mode: nil;  -*-

# Copyright 2019 Sebastian Gniazdowski
# License: MIT

typeset -g zide_ef
zide_ef=( ${(k)functions} )
trap "unset -f -- \"\${(k)functions[@]:|zide_ef}\" &>/dev/null; unset zide_ef" EXIT
trap "unset -f -- \"\${(k)functions[@]:|zide_ef}\" &>/dev/null; unset zide_ef; return 1" INT

local name_and_path=$1
local pth=${name_and_path:h} name=${name_and_path:t}
local -a mods
mods=( ${@[2,-1]} )

.get-zshelldoc-body() {
    local name=$1 normname=$2 subdir=$3

    REPLY="typeset -x PATH=\$PATH:\$${normname}_DIR/${(q)subdir}/zshelldoc/bin"

    return 0
}

.get-zflai-body() {
    local name=$1 normname=$2 subdir=$3

    REPLY="source \$${normname}_DIR/${(q)subdir}/zflai/zflai.plugin.zsh"

    reply+=(
	'# Zflai' ''
	'# Learn a table. The timestamp field is automatically populated.'
	'zflai-ctable  "a-table :: timestamp:integer / message:varchar(288)"'
	'# Log to the default backend – a file in ~/.cache/zflai'
	'zflai-log "a-table :: Hello World!"'
    )

    return 0
}

.get-zui-body() {
    local name=$1 normname=$2 subdir=$3

    REPLY="source \$${normname}_DIR/${(q)subdir}/zui/zui.plugin.zsh"

    return 0
}

.get-zsh-string-lib-body() {
    local name=$1 normname=$2 subdir=$3

    REPLY="source \$${normname}_DIR/${(q)subdir}/zsh-string-lib/zsh-string-lib.lib.zsh"

    reply+=(
	''
	'# Zsh-string-lib'
	''
	'# Prepare a simple JSON buffer'
	'typeset json=''{
    "profiles":{
	"empty": {},
        "default":{
            "as":"program"
        },
        "bgn":{
            "as":"null",
            "sbin":"fzy;contrib/fzy-*"
        }
    }
}'''
	''
	'# Parse the buffer'
	'local -A Strings; @str-parse-json "$json" "profiles" Strings'
	''
	'# Get the `bgn'' profile'
	'integer pos=${${(@Q)${(@z)Strings[2/1]}}[(I)bgn]}'
	'if (( pos )) {'
	  '    local -A fields'
	  '    fields=( "${(@Q)${(@z)Strings[3/$(( (pos+1) / 2 ))]}}" )'
	  '    # Use the `fields'' hash holding the values of the `bgn'' object'
	  '    # …'
	  '    print -rl -- "${(kv)fields[@]}"'
	'}'
    )
    return 0
}

.get-modernish-body() {
    local name=$1 normname=$2 subdir=$3

    REPLY="typeset -x PATH=\$PATH:\$${normname}_DIR/${(q)subdir}/modernish-bin/bin"

    return 0
}

.get-shu2-body() {
    local name=$1 normname=$2 subdir=$3

    REPLY="source \$${normname}_DIR/${(q)subdir}/shu2/lib"
    return 0
}

.get-zunit-body() {
    local name=$1 normname=$2 subdir=$3

    REPLY="typeset -x PATH=\$PATH:\$${normname}_DIR/${(q)subdir}/zunit"

    return 0
}

.get-revolver-body() {
    local name=$1 normname=$2 subdir=$3

    REPLY="typeset -x PATH=\$PATH:\$${normname}_DIR/${(q)subdir}/revolver"

    return 0
}

.get-czhttpd-body() {
    local name=$1 normname=$2 subdir=$3

    REPLY="typeset -x PATH=\$PATH:\$${normname}_DIR/${(q)subdir}/czhttpd"

    return 0
}

.get-shfmt-body() {
    local name=$1 normname=$2 subdir=$3

    REPLY="typeset -x PATH=\$PATH:\$${normname}_DIR/${(q)subdir}/shfmt"

    return 0
}

.get-preamble-body() {
    local name=$1 normname=$2 subdir=$3
    REPLY="$(<$ZIDE_DIR/templates/script.tmpl.zsh)"
    REPLY=${REPLY//\$script_name/$name}
    REPLY=${REPLY//\$script_norm_name/$normname}
    REPLY=${REPLY//\$year/${$(date +%Y 2>/dev/null):-2019}}
    REPLY=${REPLY//\$license/MIT}
    REPLY=${REPLY//\$user_name/${$(git config user.name 2>/dev/null):-Your Name}}
    # TODO: allow changing the settings
    REPLY=${REPLY//\$shift/4}
    REPLY=${REPLY/\$emacstabs/ indent-tabs-mode:nil;}
    REPLY=${REPLY/\$vimtabs:/:et}
}

command rm -f "$name"

local normname=${(U)name//[^a-zA-Z0-9]/_}

.get-preamble-body "$name" "$normname" components
print -r $REPLY >! "$name"

reply=()
local mod
for mod ( $mods ) {
    .get-$mod-body "$name" "$normname" components
    print -r $REPLY >>! "$name"
}

if (( ${#reply} )) {
    print -- "\n# Example uses\n" >>! "$name"
    print -rl "${reply[@]}" >>! "$name"
}

print >>! "$name"

chmod +x $name

# vim:ft=zsh:sw=4:sts=4:noet:
